doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Node.js Streams

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Node.js Streams
        h3 Data Flows for Fun and Profit

      section
        h1 Howard Tyson
        ul
          li VP of Engineering at Zivtech
          li Doing node work for 4 years

      section
        h2 Credit where credit is due
        ul
          li
            img(src="images/substack.jpg" width="25%" height="30%")
          li This presentation steals shamelessly from James Holliday (better known as substack) and his <a href="https://github.com/substack/stream-handbook">Stream Handbook</a>
          li He's way smarter than me
          li (and probably you).
      section
        h1 Act I: The Prologue

      section
        h1 What are Streams?

      section
        h2 Not a new idea

      section
        h2 But still the new hawtness

      section
        h2 The wisdom of the elders
        ul
          li
            img(src="images/Doug-McIlroy.png")
          li
            blockquote
              "We should have some ways of connecting programs like garden hose--screw in
              another segment when it becomes necessary to massage data in
              another way. This is the way of IO also."
          li
            | Doug McIlroy. October 11, 1964

      section
        h1 This presentation has code!
        ul
          li for posix people
          li sorry windows people
          li to follow along you can clone <a href="https://github.com/tizzo/node.js-streams-talk">this repo</a> and go into the 
      section
        h1 Windows people
        img(src="http://media.giphy.com/media/ISumMYQyX4sSI/giphy.gif")
        h2 seriouslyâ€¦ just stop
        h3 you're only hurting yourself

      section
        h2 Love Unix? Think pipes

      section
        pre
          code.language-javascript.
            vagrant@fgrsdev1:~$ ls -al /
            total 178
            dr-xr-xr-x.  23 root    root     4096 Apr 14 17:58 .
            dr-xr-xr-x.  23 root    root     4096 Apr 14 17:58 ..
            dr-xr-xr-x.   2 root    root     4096 Jan  2 20:28 bin
            dr-xr-xr-x.   5 root    root     1024 Mar  9 14:39 boot
            [...]
            dr-xr-xr-x  122 root    root        0 Apr 14 10:57 proc
            drwxrwxrwt.  30 root    root    77824 Apr 15 14:32 tmp
            drwxr-xr-x.  12 root    root     4096 Apr 15  2013 usr
            drwxr-xr-x.  20 root    root     4096 Jan  2 20:28 var
        h3 follow along: ./example1.sh

      section
        h2 Count the lines, words, and characters
        pre
          code.language-javascript.
            vagrant@fgrsdev1:~$ ls / | wc
                20      21     149
        h3 follow along: `./example1.sh`


      section
        h2 Only lines with `var` in them
        pre
          code.language-javascript.
            vagrant@fgrsdev1:~$ ls -al / | grep var
            drwxr-xr-x.  20 root    root     4096 Jan  2 20:28 var
        h3 follow along: `./example1.sh`

      section
        h2 Count the lines, words, and characters
        pre
          code.language-javascript.
            vagrant@fgrsdev1:~$ ls / | grep var | wc
                1       9      55
        h3 follow along: `./example1.sh`

      section
        h1 Act II: Bring on the NODE!

      section
        h1 Stream types

      section
        h1 Different types of streams

      section
        h2 Read Streams
        pre
          code.language-javascript
            |var fs = require('fs');
            |fs.createReadStream('example.txt')

      section
        h2 Write Streams
        pre
          code.language-javascript
            |var fs = require('fs');
            |fs.createWriteStream('output.txt')


      section
        h2 Neat, but how do you use them together?

      section
        h1 Pipes!

      section
        h2 Piping input straight into ouput
        pre
          code.language-javascript
            |process.stdin.pipe(process.stdout)
        h3 follow along: `./example2.sh`


      section
        h2 Abstract the source: file or stdin
        pre
          code.language-javascript
            | if (process.argv[2]) {
            |   var readStream = fs.createReadStream(process.argv[2]);
            | }
            | else {
            |   var readStream = process.stdin;
            | }
            | readStream
            |   .pipe(process.stdout);
        h3 follow along: `./example3.js`

      section
        h2 Specify a file or feed in stdin
        pre
          code.language-javascript
            | node example3.js example-text.txt | wc -l
            | echo -e "foo\nbar" | node example3.js | wc -l
        h3 follow along: `./example4.sh`

      section
        h2 In node pretty much all IO is done with streams
        pre
          code.language-javascript
            | var server = require('http')
            |   .createServer(function(req, res) {
            |     res.writeHead(200);
            |     setInterval(function() {
            |       res.write("beep\n");
            |     }, 500);
            |   });
            | server.listen(8000);
        h3 follow along: `./example4.sh`

      section
        h2 Transform Streams
        ul
          li They're readable *AND* writeable
          li Data goes in one way
          li It comes out another

      section
        h2 Example transform
        pre
          code.language-javascript
            | var gzip = zlib.createGzip();
            | var fs = require('fs');
            | process.stdin
            |   .pipe(gzip)
            |   .pipe(process.stdout);
        h3 see it in action: `./example6.sh`


      section
        h1 Act III: Real Data!

      section
        h2 So now what, we design our own protocol, worry about frames?

      section
        h2 NOPE! Use line delimited minified JSON!

      section
        h2 A simple structured protocol
        pre
          code.language-javascript
          | {"foo":"bar"}
          | {"foo":"baz"}
        h3 It's dead simple, easy to parse, and it works everywhere

      section
        h2 Event Stream Module!
        pre
          code.language-javascript
            | var es = require('event-stream');
            | process.stdin
            |   .pipe(es.split())
            |   .pipe(es.parse())
            |   .pipe(es.through(function(data) {
            |     // Filter all but the type specified at the cli
            |     if (data.type == process.argv[2]) {
            |       this.queue(data);
            |     }
            |   }))
            |   .pipe(es.stringify())
            |   .pipe(process.stdout)
            | ;
        h3 see it in action: `./example7.sh`

      section
        h2 Connect it to the network
        pre
          code.language-javascript
            | nc -k -l 8999 ./example7.js log
        pre
          code.language-javascript
            | cat example.log.json | nc 8999
        h3 see it in action: `./example8.sh`

    script(src='build/build.js')
